function [X, res, eta, gcv] = genGKB_SPR(A, b, M, N, k, tol, reorth)
    % genGKB_SPR uses the subspace regularization method to solve the 
    % general-form regularization problem
    %   min{||Ax-b||_{M^{-1}}^2 + lambda*||x||_{N^{-1}}^2}.
    % by projecting it as
    %    min_{x\in X_k} ||x||_{N^{-1}},  X_k = {x: min_{x\in S_k}} ||Ax-b||_{M^{-1}} },
    % where the solution subspace S_k=span(V_k) is generated by gen_GKB.
    % The whole iteratation number is k, and it computes the
    % (1) residual norm ||Ax_k-b||_{M^{-1}};
    % (2) norm of regularization term, ||x_k||_{N^{-1}};
    % (3) values of GCV function with respect to k.
    %
    % Inputs:
    %   A: either (a) a full or sparse mxn matrix;
    %             (b) a matrix object that performs the matrix*vector operation
    %   b: right-hand side vector
    %   M: covaraince matrix of noise e, e~N(0,M), symmetric positive definite
    %   N: scaled covaraince matrix of prior x, x~N(0,\lambda^{-1}N), symmetric positive definite
    %   k: the maximum number of iterations 
    %   tol: stopping tolerance of pcg.m for solving M*sb = s
    %       if tol=0, then solve it directly 
    %   reorth: 
    %       0: no reorthogonalization
    %       1: full reorthogonaliation, MGS
    %       2: double reorthogonaliation, MGS
    %   tau: parameter used for discrepancy principle, res(k) <= tau*\sqrt(m)
    %
    % Outputs: 
    %   X: store the first k regularized solutions
    %   res: strore residual norm of the first k regularized solution, ||Axk-b||_{M^{-1}}
    %   eta: stores the norm of regularization term, ||x_k||_{N^{-1}}
    %   gcv: store the values of GCV function
    % 
    % Reference: [1]. Haibo Li, Subspace projection regularization for large-scale Bayesian
    %  inverse problems, preprint, 2023.
    % [2]. J. Chung and A. K. Saibaba. Generalized hybrid iterative methods for large-scale Bayesian
    %  inverse problems. SIAM J. Sci. Comput., 39(5):S24{S46, 2017.
    %
    % Haibo Li, Institute of Computing Technology, Chinese Academy of Sciences
    % 08, Oct, 2023.
    % 
    % Check for acceptable number of input arguments

if nargin < 7
    error('Not Enough Inputs')
end

[m, n] = sizem1(A); 
if n ~= size(N,1) || m~= size(b,1)
    error('The dimensions are not consistent')
end

fprintf('Start the genGKB-SPR iteration ==================================\n');

[bbeta, B, ~, Z, Zb] = gen_GKB(A, b, M, N, k, tol, reorth);

% Intialiazation
X = zeros(n, k); 
res = zeros(k,1);  
eta = zeros(k,1); 
gcv = zeros(k, 1);
Xb = zeros(n, k);  % stores N^{-1}*x_k  


fprintf('Start update procedure +++++++++++++++++++++++++++++\n');
w = Z(:,1);
wb = Zb (:,1);  % N^{-1}*w
phi_bar = bbeta;
rho_bar = B(1,1);
x = zeros(n, 1);
xb = zeros(n, 1);  % % N^{-1}*x

for l = 1:k
    % Construct and apply orthogonal transformation.
    rrho = sqrt(rho_bar^2 + B(l+1,l)^2);
    c = rho_bar/rrho;
    s =  B(l+1,l)/rrho;
    theta = s*B(l+1,l+1);
    rho_bar = -c*B(l+1,l+1);
    phi = c*phi_bar;
    phi_bar = s*phi_bar;

    % Update the solution.
    x = x + (phi/rrho)*w;
    w = Z(:,l+1) - (theta/rrho)*w;
    X(:,l) = x;
    res(l) = abs(phi_bar);  % residual norm
    xb = xb + (phi/rrho)*wb;
    wb = Zb(:,l+1) - (theta/rrho)*wb;

    % Compute ||x_k||_{N^{-1}}=sqrt(xb'*x)
    eta(l) = sqrt(xb' * x);
    
    % gcv function value
    gcv(l) = phi_bar^2 / (m-l)^2;
end
    
end
    
    