function [X, res, iterstop] = genGKBSPR_DP(A, b, M, N, k, tol, reorth, tau)
    % genGKBSPR_DP uses the subspace regularization method to solve the 
    % general-form regularization problem
    %   min{||Ax-b||_{M^{-1}}^2 + lambda*||x||_{N^{-1}}^2}.
    % by projecting it as
    %    min_{x\in X_k} ||x||_{N^{-1}},  X_k = {x: min_{x\in S_k}} ||Ax-b||_{M^{-1}} },
    % where the solution subspace S_k=span(V_k) is generated by gen_GKB.
    % The early stopping rule is discrepancy principle.
    %
    % Inputs:
    %   A: either (a) a full or sparse mxn matrix;
    %             (b) a matrix object that performs the matrix*vector operation
    %   b: right-hand side vector
    %   M: covaraince matrix of noise e, e~N(0,M), symmetric positive definite
    %   N: scaled covaraince matrix of prior x, x~N(0,\lambda^{-1}N), symmetric positive definite
    %   k: the maximum number of iterations 
    %   tol: stopping tolerance of pcg.m for solving M*sb = s
    %       if tol=0, then solve it directly 
    %   reorth: 
    %       0: no reorthogonalization
    %       1: full reorthogonaliation, MGS
    %       2: double reorthogonaliation, MGS
    %   tau: parameter used for discrepancy principle, res(k) <= tau*\sqrt(m)
    %
    % Outputs: 
    %   X: store the first k regularized solutions
    %   rel: strore residual norm of the first k regularized solution, ||Axk-b||_{M^{-1}}
    %   iterstop: the early seopping iteration estimated by DP
    % 
    % Reference: [1]. Haibo Li, Subspace projection regularization for large-scale Bayesian
    %  inverse problems, preprint, 2023.
    % [2]. J. Chung and A. K. Saibaba. Generalized hybrid iterative methods for large-scale Bayesian
    %  inverse problems. SIAM J. Sci. Comput., 39(5):S24{S46, 2017.
    %
    % Haibo Li, Institute of Computing Technology, Chinese Academy of Sciences
    % 04, Sept, 2023.
    % 
    % Check for acceptable number of input arguments

if nargin < 8
    error('Not Enough Inputs')
end

[m, n] = sizem1(A); 
if n ~= size(N,1) || m~= size(b,1)
    error('The dimensions are not consistent')
end

fprintf('Start the genGKB-SPR iteration ==================================\n');

[bbeta, B, ~, Z, ~] = gen_GKB(A, b, M, N, k, tol, reorth);

% Intialiazation
X = zeros(n, k); 
res = zeros(k,1);   
iterstop = 0;  % initialize the early stopping iteration
flag = 1;  % indicate wether we still need to estimate iterstop
dp = tau * sqrt(m);  % discrepancy threshold

fprintf('Start update procedure +++++++++++++++++++++++++++++\n');
w = Z(:,1);
phi_bar = bbeta;
rho_bar = B(1,1);
x = zeros(n, 1);

for l = 1:k
    % Construct and apply orthogonal transformation.
    rrho = sqrt(rho_bar^2 + B(l+1,l)^2);
    c = rho_bar/rrho;
    s =  B(l+1,l)/rrho;
    theta = s*B(l+1,l+1);
    rho_bar = -c*B(l+1,l+1);
    phi = c*phi_bar;
    phi_bar = s*phi_bar;

    % Update the solution.
    x = x + (phi/rrho)*w;
    w = Z(:,l+1) - (theta/rrho)*w;
    X(:,l) = x;
    res(l) = abs(phi_bar);  % residual norm

    % estimate optimal regularization step by MDP
    if flag == 1 && abs(phi_bar) <= dp
        iterstop = l;
        flag = 0;
    end
end
    
end
    
    